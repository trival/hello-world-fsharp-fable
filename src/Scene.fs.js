import { rayColor, RenderProps, defaultRenderProps } from "./Image.fs.js";
import { Ray, Sphere, HittableList_$ctor_28E2EF13 } from "./Shapes.fs.js";
import { Vec3_$ctor_Z7AD9E565 } from "./Vectors/./Vec3F64.fs.js";
import { some } from "../fable_modules/fable-library.4.1.4/Option.js";
import { map } from "../fable_modules/fable-library.4.1.4/Array.js";

export const width = 400;

export const height = 300;

export const props = new RenderProps(width, height, 0.9, defaultRenderProps.origin, defaultRenderProps.direction, 100, 20);

export function render() {
    let a_25, a_26, b_23, a_34, a_35, b_29;
    const world = HittableList_$ctor_28E2EF13([HittableList_$ctor_28E2EF13([new Sphere(Vec3_$ctor_Z7AD9E565(0, 0, -1), 0.5), new Sphere(Vec3_$ctor_Z7AD9E565(-1, 0, -1), 0.5), new Sphere(Vec3_$ctor_Z7AD9E565(1, 0, -1), 0.5)]), new Sphere(Vec3_$ctor_Z7AD9E565(0, -100.5, -1), 100)]);
    let image;
    const props_1 = props;
    const world_1 = world;
    const width_1 = props_1.width | 0;
    const height_1 = props_1.height | 0;
    const w = width_1;
    const h = height_1;
    const aspectRatio = w / h;
    const viewportHeight = 2;
    const viewportWidth = aspectRatio * viewportHeight;
    const viewportU = Vec3_$ctor_Z7AD9E565(viewportWidth, 0, 0);
    const viewportV = Vec3_$ctor_Z7AD9E565(0, -viewportHeight, 0);
    let pixelDeltaU;
    const a_1 = viewportU;
    const b_1 = 1 / w;
    const x_6 = a_1.X * b_1;
    const y_6 = a_1.Y * b_1;
    const z_6 = a_1.Z * b_1;
    pixelDeltaU = Vec3_$ctor_Z7AD9E565(x_6, y_6, z_6);
    let pixelDeltaV;
    const a_3 = viewportV;
    const b_3 = 1 / h;
    const x_7 = a_3.X * b_3;
    const y_7 = a_3.Y * b_3;
    const z_7 = a_3.Z * b_3;
    pixelDeltaV = Vec3_$ctor_Z7AD9E565(x_7, y_7, z_7);
    let viewportTopLeft;
    let a_10;
    let a_9;
    const a_6 = props_1.origin;
    let b_6;
    const a_5 = viewportU;
    const b_5 = 1 / 2;
    const x_8 = a_5.X * b_5;
    const y_8 = a_5.Y * b_5;
    const z_8 = a_5.Z * b_5;
    b_6 = Vec3_$ctor_Z7AD9E565(x_8, y_8, z_8);
    const x_9 = a_6.X - b_6.X;
    const y_9 = a_6.Y - b_6.Y;
    const z_9 = a_6.Z - b_6.Z;
    a_9 = Vec3_$ctor_Z7AD9E565(x_9, y_9, z_9);
    let b_9;
    const a_8 = viewportV;
    const b_8 = 1 / 2;
    const x_10 = a_8.X * b_8;
    const y_10 = a_8.Y * b_8;
    const z_10 = a_8.Z * b_8;
    b_9 = Vec3_$ctor_Z7AD9E565(x_10, y_10, z_10);
    const x_11 = a_9.X - b_9.X;
    const y_11 = a_9.Y - b_9.Y;
    const z_11 = a_9.Z - b_9.Z;
    a_10 = Vec3_$ctor_Z7AD9E565(x_11, y_11, z_11);
    const b_10 = Vec3_$ctor_Z7AD9E565(0, 0, props_1.focalLength);
    const x_13 = a_10.X - b_10.X;
    const y_13 = a_10.Y - b_10.Y;
    const z_13 = a_10.Z - b_10.Z;
    viewportTopLeft = Vec3_$ctor_Z7AD9E565(x_13, y_13, z_13);
    let pixel00Loc;
    let a_16;
    const a_13 = viewportTopLeft;
    let b_13;
    const a_12 = pixelDeltaU;
    const b_12 = 1 / 2;
    const x_14 = a_12.X * b_12;
    const y_14 = a_12.Y * b_12;
    const z_14 = a_12.Z * b_12;
    b_13 = Vec3_$ctor_Z7AD9E565(x_14, y_14, z_14);
    const x_15 = a_13.X + b_13.X;
    const y_15 = a_13.Y + b_13.Y;
    const z_15 = a_13.Z + b_13.Z;
    a_16 = Vec3_$ctor_Z7AD9E565(x_15, y_15, z_15);
    let b_16;
    const a_15 = pixelDeltaV;
    const b_15 = 1 / 2;
    const x_16 = a_15.X * b_15;
    const y_16 = a_15.Y * b_15;
    const z_16 = a_15.Z * b_15;
    b_16 = Vec3_$ctor_Z7AD9E565(x_16, y_16, z_16);
    const x_17 = a_16.X + b_16.X;
    const y_17 = a_16.Y + b_16.Y;
    const z_17 = a_16.Z + b_16.Z;
    pixel00Loc = Vec3_$ctor_Z7AD9E565(x_17, y_17, z_17);
    const width_2 = width_1 | 0;
    const height_2 = height_1 | 0;
    const buf = new Float64Array((width_2 * height_2) * 4);
    for (let y_33 = 0; y_33 <= (height_2 - 1); y_33++) {
        console.log(some("Rendering image row"), y_33 + 1);
        for (let x_33 = 0; x_33 <= (width_2 - 1); x_33++) {
            const i = ((x_33 + (y_33 * width_2)) * 4) | 0;
            let patternInput;
            let pixelCenter;
            let a_20;
            const a_18 = pixel00Loc;
            let b_18;
            const a_17 = pixelDeltaU;
            const b_17 = x_33;
            const x_19 = a_17.X * b_17;
            const y_19 = a_17.Y * b_17;
            const z_18 = a_17.Z * b_17;
            b_18 = Vec3_$ctor_Z7AD9E565(x_19, y_19, z_18);
            const x_20 = a_18.X + b_18.X;
            const y_20 = a_18.Y + b_18.Y;
            const z_19 = a_18.Z + b_18.Z;
            a_20 = Vec3_$ctor_Z7AD9E565(x_20, y_20, z_19);
            let b_20;
            const a_19 = pixelDeltaV;
            const b_19 = y_33;
            const x_21 = a_19.X * b_19;
            const y_21 = a_19.Y * b_19;
            const z_20 = a_19.Z * b_19;
            b_20 = Vec3_$ctor_Z7AD9E565(x_21, y_21, z_20);
            const x_22 = a_20.X + b_20.X;
            const y_22 = a_20.Y + b_20.Y;
            const z_21 = a_20.Z + b_20.Z;
            pixelCenter = Vec3_$ctor_Z7AD9E565(x_22, y_22, z_21);
            let direction;
            let a_23;
            const a_21 = pixelCenter;
            const b_21 = props_1.origin;
            const x_23 = a_21.X - b_21.X;
            const y_23 = a_21.Y - b_21.Y;
            const z_22 = a_21.Z - b_21.Z;
            a_23 = Vec3_$ctor_Z7AD9E565(x_23, y_23, z_22);
            const a_28 = a_23;
            const b_25 = 1 / Math.sqrt((a_25 = a_23, (a_26 = a_25, (b_23 = a_25, ((a_26.X * b_23.X) + (a_26.Y * b_23.Y)) + (a_26.Z * b_23.Z)))));
            const x_25 = a_28.X * b_25;
            a_28.X = x_25;
            const y_25 = a_28.Y * b_25;
            a_28.Y = y_25;
            const z_24 = a_28.Z * b_25;
            a_28.Z = z_24;
            direction = a_23;
            const r = new Ray(props_1.origin, direction);
            let color = rayColor(r, world_1, props_1.maxRayBounces);
            if (props_1.samplePerPixel > 1) {
                for (let forLoopVar = 2; forLoopVar <= props_1.samplePerPixel; forLoopVar++) {
                    let center_4;
                    const a_29 = pixelCenter;
                    const b_26 = Vec3_$ctor_Z7AD9E565((Math.random() - 0.5) * pixelDeltaU.X, (Math.random() - 0.5) * pixelDeltaV.Y, 0);
                    const x_27 = a_29.X + b_26.X;
                    const y_27 = a_29.Y + b_26.Y;
                    const z_26 = a_29.Z + b_26.Z;
                    center_4 = Vec3_$ctor_Z7AD9E565(x_27, y_27, z_26);
                    let direction_1_1;
                    let a_32;
                    const a_30 = center_4;
                    const b_27 = props_1.origin;
                    const x_28 = a_30.X - b_27.X;
                    const y_28 = a_30.Y - b_27.Y;
                    const z_27 = a_30.Z - b_27.Z;
                    a_32 = Vec3_$ctor_Z7AD9E565(x_28, y_28, z_27);
                    const a_37 = a_32;
                    const b_31 = 1 / Math.sqrt((a_34 = a_32, (a_35 = a_34, (b_29 = a_34, ((a_35.X * b_29.X) + (a_35.Y * b_29.Y)) + (a_35.Z * b_29.Z)))));
                    const x_30 = a_37.X * b_31;
                    a_37.X = x_30;
                    const y_30 = a_37.Y * b_31;
                    a_37.Y = y_30;
                    const z_29 = a_37.Z * b_31;
                    a_37.Z = z_29;
                    direction_1_1 = a_32;
                    const r_1 = new Ray(props_1.origin, direction_1_1);
                    const a_38 = color;
                    const b_32 = rayColor(r_1, world_1, props_1.maxRayBounces);
                    const x_31 = a_38.X + b_32.X;
                    a_38.X = x_31;
                    const y_31 = a_38.Y + b_32.Y;
                    a_38.Y = y_31;
                    const z_30 = a_38.Z + b_32.Z;
                    a_38.Z = z_30;
                }
            }
            const a_40 = color;
            const b_34 = 1 / props_1.samplePerPixel;
            const x_32 = a_40.X * b_34;
            a_40.X = x_32;
            const y_32 = a_40.Y * b_34;
            a_40.Y = y_32;
            const z_31 = a_40.Z * b_34;
            a_40.Z = z_31;
            const self = color;
            patternInput = [self.X, self.Y, self.Z, 1];
            const r_2 = patternInput[0];
            const g = patternInput[1];
            const b_35 = patternInput[2];
            const a_42 = patternInput[3];
            buf[i] = r_2;
            buf[i + 1] = g;
            buf[i + 2] = b_35;
            buf[i + 3] = a_42;
        }
    }
    image = buf;
    return map((v) => Math.pow(v, 0.7), image, Float64Array);
}

